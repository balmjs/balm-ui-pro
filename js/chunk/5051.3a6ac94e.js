"use strict";(self.webpackChunkbalm_ui_pro=self.webpackChunkbalm_ui_pro||[]).push([[5051],{5051:function(n,e,t){t.r(e);e.default='<ul> <li><p><code>apis/index.js</code></p> <pre><code class="language-js">const apis = [\n  [\n    &#39;demo&#39;,\n    &#39;/demo&#39;,\n    [&#39;read&#39;],\n    {\n      crud: {\n        read: {\n          selectOptions: &#39;select/options&#39;,\n          checkboxOptions: &#39;checkbox/options&#39;,\n          radioOptions: &#39;radio/options&#39;,\n          chipsOptions: &#39;chips/options&#39;,\n          multiSelectOptions1: &#39;multi-select/options1&#39;,\n          multiSelectOptions2: &#39;multi-select/options2&#39;,\n          multiSelectOptions3: &#39;multi-select/options3&#39;\n        }\n      }\n    }\n  ],\n  [&#39;user&#39;, &#39;/user&#39;, [&#39;create&#39;, &#39;read&#39;, &#39;update&#39;, &#39;delete&#39;]],\n  [\n    &#39;post&#39;,\n    &#39;/post&#39;,\n    [&#39;read&#39;],\n    {\n      crud: {\n        read: {\n          &#39;&#39;: &#39;get&#39;,\n          index: &#39;index&#39;\n        }\n      }\n    }\n  ]\n];\n\nexport default {\n  crud: {\n    create: &#39;add&#39;,\n    // read: &#39;get&#39;,\n    read: {\n      list: &#39;list&#39;,\n      detail: &#39;info&#39;\n    },\n    update: &#39;edit&#39;,\n    delete: &#39;delete&#39;\n  },\n  // formatApiAction: (modelName, actionName) =&gt; `${modelName}-${actionName}`,\n  // urlToCamelCase: true,\n  apis\n};\n</code></pre> </li> </ul> <pre><code class="language-js">import apiModelConfig from &#39;@/apis&#39;;\n\nVue.use(BalmUIPro, {\n  $model: apiModelConfig\n});\n</code></pre> <hr> <ul> <li><p><code>config/model.js</code></p> <pre><code class="language-js">import { useApiModel, useConstantList } from &#39;balm-ui-pro&#39;;\nimport { useHttp } from &#39;@/plugins/http&#39;;\nimport { API_ENDPOINT } from &#39;@/config&#39;;\n\nconst http = useHttp();\nconst $apiModel = useApiModel();\n\nfunction getApiUrl(model, operation, apiAction) {\n  return apiAction\n    ? $apiModel.getApi(model, operation, apiAction)\n    : $apiModel.getApi(model, operation);\n}\n\nexport default {\n  methods: {\n    requestConfig(config = {}) {\n      const { mock, ...options } = config;\n      return mock || this.$mock\n        ? Object.assign({ baseURL: `/mock${API_ENDPOINT}` }, options)\n        : options;\n    },\n    // Basic\n    createModel(model, data = {}, config = {}) {\n      const { apiAction, ...options } = config;\n      const apiUrl = getApiUrl(model, &#39;create&#39;, apiAction);\n      return http.post(apiUrl, data, this.requestConfig(options));\n    },\n    deleteModel(model, data = {}, config = {}) {\n      const { apiAction, ...options } = config;\n      const apiUrl = getApiUrl(model, &#39;delete&#39;, apiAction);\n      return http.post(apiUrl, data, this.requestConfig(options));\n    },\n    updateModel(model, data = {}, config = {}) {\n      const { apiAction, ...options } = config;\n      const apiUrl = getApiUrl(model, &#39;update&#39;, apiAction);\n      return http.post(apiUrl, data, this.requestConfig(options));\n    },\n    getModel(model, params = {}, config = {}) {\n      const { apiAction, ...options } = config;\n      const apiUrl = getApiUrl(model, &#39;read&#39;, apiAction);\n      return http.get(apiUrl, {\n        params,\n        ...this.requestConfig(options)\n      });\n    },\n    // Extended\n    getModelList(model, params = {}, config = {}) {\n      const apiUrl = getApiUrl(model, &#39;read&#39;, &#39;list&#39;);\n      return http.get(apiUrl, {\n        params,\n        ...this.requestConfig(config)\n      });\n    },\n    getModelDetail(model, params = {}, config = {}) {\n      const apiUrl = getApiUrl(model, &#39;read&#39;, &#39;detail&#39;);\n      return http.get(apiUrl, {\n        params,\n        ...this.requestConfig(config)\n      });\n    },\n    async getModelOptions(model, params = {}, config = {}) {\n      let result = [];\n\n      const models = model.split(&#39;:&#39;);\n      const [modelType, modelName] = models;\n      if (modelName) {\n        switch (modelType) {\n          case &#39;list&#39;:\n            result = await this.getModelList(modelName, params, config);\n            break;\n          case &#39;local&#39;:\n            result = useConstantList(modelName);\n            break;\n        }\n      } else {\n        result = await this.getModel(\n          model,\n          params,\n          Object.assign({}, config, {\n            apiAction: &#39;options&#39;\n          })\n        );\n      }\n\n      return result;\n    }\n  }\n};\n</code></pre> </li> </ul> '}}]);