"use strict";(self.webpackChunkbalm_ui_pro=self.webpackChunkbalm_ui_pro||[]).push([[6005],{6005:function(n,e,t){t.r(e);e.default='<ul> <li><p><code>config/model.js</code></p> <pre><code class="language-js">export default {\n  methods: {\n    // `this.$store.getModel` see BalmUI Pro `model` plugin for details\n    async setModelOptions(modelList) {\n      const modelOptions = {};\n\n      for (const model of modelList) {\n        const modelType = model.split(&#39;:&#39;);\n        const [modelName, apiAction] = modelType;\n\n        switch (modelName) {\n          case &#39;demo&#39;:\n            modelOptions[`${apiAction}Options`] = await this.$store.getModel(\n              modelName,\n              {},\n              { apiAction: `${apiAction}Options` }\n            );\n            break;\n        }\n      }\n\n      return modelOptions;\n    }\n    // ...\n  }\n};\n</code></pre> </li> <li><p><code>components/views/form-view.js</code></p> <pre><code class="language-js">import { useStore } from &#39;balm-ui&#39;;\n\nexport async function setModelOptionsFn(modelList) {\n  const store = useStore();\n\n  return await store.setModelOptions(modelList);\n}\n</code></pre> </li> </ul> <pre><code class="language-js">import { setModelOptionsFn } from &#39;@/components/views/form-view&#39;;\n\napp.use(BalmUIPro, {\n  UiFormView: {\n    setModelOptionsFn\n  }\n});\n</code></pre> <hr> <ul> <li><p><code>model-config/demo.js</code></p> <pre><code class="language-js">import { useStore } from &#39;balm-ui&#39;;\n\nconst store = useStore();\n\nexport default (\n  data,\n  {\n    selectOptions,\n    checkboxOptions,\n    radioOptions,\n    chipsOptions,\n    switchOptions,\n    multiSelectOptions\n  }\n) =&gt; {\n  const { id } = data;\n\n  return [\n    {\n      if: !!id,\n      label: &#39;ID&#39;,\n      component: &#39;ui-textfield&#39;,\n      key: &#39;id&#39;,\n      value: id,\n      attrOrProp: {\n        attrs: {\n          readonly: true\n        }\n      }\n    },\n    {\n      label: &#39;Textfield&#39;,\n      component: &#39;ui-textfield&#39;,\n      key: &#39;a&#39;,\n      value: &#39;&#39;\n    },\n    {\n      label: &#39;Autocomplete&#39;,\n      component: &#39;ui-autocomplete&#39;,\n      key: &#39;b&#39;,\n      value: &#39;&#39;\n    },\n    {\n      label: &#39;Editor&#39;,\n      component: &#39;ui-editor&#39;,\n      key: &#39;c&#39;,\n      value: &#39;&#39;\n    },\n    {\n      label: &#39;Select&#39;,\n      component: &#39;ui-select&#39;,\n      key: &#39;d&#39;,\n      value: &#39;&#39;,\n      model: &#39;demo:select&#39;,\n      attrOrProp: {\n        defaultLabel: &#39;default&#39;,\n        options: selectOptions\n      }\n    },\n    {\n      show: ({ d }) =&gt; d === 2,\n      label: &#39;Checkbox&#39;,\n      component: &#39;ui-checkbox-group&#39;,\n      key: &#39;e&#39;,\n      value: data.e || [],\n      model: &#39;demo:checkbox&#39;,\n      attrOrProp: {\n        options: checkboxOptions\n      }\n    },\n    {\n      label: &#39;Radio&#39;,\n      component: &#39;ui-radio-group&#39;,\n      key: &#39;f&#39;,\n      value: &#39;&#39;,\n      model: &#39;demo:radio&#39;,\n      attrOrProp: {\n        options: radioOptions\n      }\n    },\n    {\n      label: &#39;Chips&#39;,\n      component: &#39;ui-chips&#39;,\n      key: &#39;g&#39;,\n      value: [8],\n      model: &#39;demo:chips&#39;,\n      attrOrProp: {\n        type: &#39;filter&#39;,\n        options: chipsOptions\n      }\n    },\n    {\n      label: &#39;Datepicker&#39;,\n      component: &#39;ui-datepicker&#39;,\n      key: &#39;h&#39;,\n      value: &#39;&#39;\n    },\n    {\n      label: &#39;Rangepicker&#39;,\n      component: &#39;ui-rangepicker&#39;,\n      key: &#39;i&#39;,\n      value: []\n    },\n    {\n      label: &#39;Switch&#39;,\n      component: &#39;ui-switch-box&#39;,\n      key: &#39;j&#39;,\n      value: &#39;off&#39;,\n      model: &#39;demo:switch&#39;,\n      attrOrProp: {\n        options: switchOptions,\n        switchAttrOrProp: {\n          trueValue: &#39;on&#39;,\n          falseValue: &#39;off&#39;\n        }\n      }\n    },\n    {\n      label: &#39;Slider&#39;,\n      component: &#39;ui-slider&#39;,\n      key: &#39;k&#39;,\n      value: 0\n    },\n    {\n      label: &#39;Multi-select&#39;,\n      component: &#39;ui-multi-select&#39;,\n      model: &#39;demo:multiSelect&#39;,\n      components: [\n        {\n          key: &#39;l&#39;,\n          value: &#39;&#39;,\n          options: multiSelectOptions,\n          attrOrProp: {\n            defaultLabel: &#39;Select1&#39;\n          }\n        },\n        {\n          key: &#39;m&#39;,\n          value: &#39;&#39;,\n          options: ({ l }) =&gt;\n            store.getModel(\n              &#39;demo&#39;,\n              { id: l },\n              { apiAction: &#39;multiSelectOptions2&#39; }\n            ),\n          attrOrProp: {\n            defaultLabel: &#39;Select2&#39;\n          }\n        },\n        {\n          key: &#39;n&#39;,\n          value: &#39;&#39;,\n          options: async ({ m }) =&gt;\n            await store.getModel(\n              &#39;demo&#39;,\n              { id: m },\n              { apiAction: &#39;multiSelectOptions3&#39; }\n            ),\n          attrOrProp: {\n            defaultLabel: &#39;Select3&#39;\n          }\n        }\n      ],\n      validator: &#39;multiSelectRequired&#39;,\n      multiSelectRequired: {\n        validate(_, { l, m, n }) {\n          return l || m || n;\n        },\n        message: &#39;%s is required&#39;\n      }\n    },\n    {\n      // debug: true,\n      label: &#39;Component slot&#39;,\n      component: &#39;ui-textfield&#39;,\n      key: &#39;o&#39;,\n      value: &#39;&#39;\n    },\n    {\n      // debug: true,\n      label: &#39;Custom component&#39;,\n      component: &#39;x-form-item&#39;, // NOTE: need to register first\n      key: &#39;p&#39;,\n      value: &#39;&#39;,\n      modelEvent: &#39;input&#39;\n    },\n    {\n      label: &#39;Custom slot&#39;,\n      slot: &#39;custom-slot&#39;\n    }\n  ];\n};\n</code></pre> </li> </ul> <pre><code class="language-html">&lt;ui-form-view\n  v-model=&quot;formData&quot;\n  :model-config=&quot;modelConfig&quot;\n  :action-config=&quot;actionConfig&quot;\n  @action=&quot;onAction&quot;\n&gt;\n  &lt;template #form-item__ui-textfield--l&gt;\n    &lt;input v-model=&quot;formData.l&quot; /&gt;\n  &lt;/template&gt;\n  &lt;template #custom-slot&gt;gg&lt;/template&gt;\n\n  &lt;template #after-form-view&gt;\n    &lt;ui-alert v-if=&quot;message&quot; state=&quot;warning&quot;&gt;{{ message }}&lt;/ui-alert&gt;\n  &lt;/template&gt;\n&lt;/ui-form-view&gt;\n</code></pre> <pre><code class="language-js">import modelConfig from &#39;@/model-config/demo&#39;;\n\nconst actionConfig = [\n  {\n    type: &#39;reset&#39;,\n    text: &#39;Reset&#39;,\n    attrOrProp: {\n      outlined: true\n    }\n  },\n  {\n    type: &#39;submit&#39;,\n    text: &#39;Submit&#39;,\n    attrOrProp: {\n      raised: true\n    }\n  }\n];\n\nexport default {\n  data() {\n    return {\n      formData: {},\n      modelConfig,\n      actionConfig,\n      message: &#39;&#39;\n    };\n  },\n  computed: {\n    id() {\n      return this.$route.params.id || 0;\n    }\n  },\n  async mounted() {\n    if (this.id) {\n      this.formData = await this.$store.getModelDetail(&#39;user&#39;, {\n        id: this.id\n      });\n    }\n  },\n  methods: {\n    onAction(action, result) {\n      console.log(&#39;onAction&#39;, action, result);\n\n      if (action.type === &#39;submit&#39;) {\n        const { valid, message } = result;\n\n        this.message = message;\n\n        if (valid) {\n          console.log(&#39;gg&#39;);\n        }\n      } else {\n        this.message = &#39;&#39;;\n      }\n    }\n  }\n};\n</code></pre> '}}]);